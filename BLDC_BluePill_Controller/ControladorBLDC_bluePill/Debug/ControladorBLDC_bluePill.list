
ControladorBLDC_bluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f0  080038f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038f0  080038f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f0  080038f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08003904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003904  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af5b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002219  00000000  00000000  0002afd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091e  00000000  00000000  0002ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018bdf  00000000  00000000  0002e6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7d2  00000000  00000000  000472d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7b8  00000000  00000000  00055aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc8  00000000  00000000  000e5260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e8228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003898 	.word	0x08003898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003898 	.word	0x08003898

0800014c <ADC1_Init>:
#include "adc.h"

ADC_HandleTypeDef hadc1;

void ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 800015c:	4b20      	ldr	r3, [pc, #128]	; (80001e0 <ADC1_Init+0x94>)
 800015e:	4a21      	ldr	r2, [pc, #132]	; (80001e4 <ADC1_Init+0x98>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b1f      	ldr	r3, [pc, #124]	; (80001e0 <ADC1_Init+0x94>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b1d      	ldr	r3, [pc, #116]	; (80001e0 <ADC1_Init+0x94>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b1c      	ldr	r3, [pc, #112]	; (80001e0 <ADC1_Init+0x94>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <ADC1_Init+0x94>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <ADC1_Init+0x94>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <ADC1_Init+0x94>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]

  __HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOC);
 8000188:	4b15      	ldr	r3, [pc, #84]	; (80001e0 <ADC1_Init+0x94>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	685a      	ldr	r2, [r3, #4]
 800018e:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <ADC1_Init+0x94>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f042 0220 	orr.w	r2, r2, #32
 8000196:	605a      	str	r2, [r3, #4]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000198:	4811      	ldr	r0, [pc, #68]	; (80001e0 <ADC1_Init+0x94>)
 800019a:	f000 fec5 	bl	8000f28 <HAL_ADC_Init>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <ADC1_Init+0x5c>
   {
       Error_Handler();
 80001a4:	f000 fbda 	bl	800095c <Error_Handler>
   }

  sConfig.Channel = ADC_CHANNEL_3;
 80001a8:	2303      	movs	r3, #3
 80001aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001b0:	2302      	movs	r3, #2
 80001b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <ADC1_Init+0x94>)
 80001ba:	f001 f917 	bl	80013ec <HAL_ADC_ConfigChannel>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <ADC1_Init+0x7c>
    Error_Handler();
 80001c4:	f000 fbca 	bl	800095c <Error_Handler>
  }

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <ADC1_Init+0x94>)
 80001ca:	f001 faa3 	bl	8001714 <HAL_ADCEx_Calibration_Start>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <ADC1_Init+0x8c>
  	Error_Handler();
 80001d4:	f000 fbc2 	bl	800095c <Error_Handler>
  }
}
 80001d8:	bf00      	nop
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40012400 	.word	0x40012400

080001e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a18      	ldr	r2, [pc, #96]	; (8000264 <HAL_ADC_MspInit+0x7c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d129      	bne.n	800025c <HAL_ADC_MspInit+0x74>
  {
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <HAL_ADC_MspInit+0x80>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a16      	ldr	r2, [pc, #88]	; (8000268 <HAL_ADC_MspInit+0x80>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <HAL_ADC_MspInit+0x80>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <HAL_ADC_MspInit+0x80>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a10      	ldr	r2, [pc, #64]	; (8000268 <HAL_ADC_MspInit+0x80>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <HAL_ADC_MspInit+0x80>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Isense_3_Pin|Isense_2_Pin|Isense_1_Pin|Vsense_Pin|Thottle_Pin;  //throttlepin
 8000238:	234f      	movs	r3, #79	; 0x4f
 800023a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800023c:	2303      	movs	r3, #3
 800023e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <HAL_ADC_MspInit+0x84>)
 8000248:	f001 fc2a 	bl	8001aa0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2012      	movs	r0, #18
 8000252:	f001 fbee 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000256:	2012      	movs	r0, #18
 8000258:	f001 fc07 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  }
}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40012400 	.word	0x40012400
 8000268:	40021000 	.word	0x40021000
 800026c:	40010800 	.word	0x40010800

08000270 <get_halls>:
bldc_t bldc = {0};  // Initialize all fields to zero

// Interrupts
volatile uint8_t adc_conv_completed = 1;

bldc_return_state get_halls(unsigned int * hall){
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	unsigned int hallCounts[] = {0, 0, 0};
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]

	// Read all the Hall pins repeatedly and tally the results
	for (unsigned int i = 0; i < HALL_OVERSAMPLE; i++) {
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24
 8000288:	e024      	b.n	80002d4 <get_halls+0x64>
		int h_a, h_b, h_c;

		gpio_read(&h_a, BLDC_HALL_A_PORT, BLDC_HALL_A_PIN);
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2210      	movs	r2, #16
 8000290:	4923      	ldr	r1, [pc, #140]	; (8000320 <get_halls+0xb0>)
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f9e2 	bl	800065c <gpio_read>
		gpio_read(&h_b, BLDC_HALL_B_PORT, BLDC_HALL_B_PIN);
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	2208      	movs	r2, #8
 800029e:	4920      	ldr	r1, [pc, #128]	; (8000320 <get_halls+0xb0>)
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9db 	bl	800065c <gpio_read>
		gpio_read(&h_c, BLDC_HALL_C_PORT, BLDC_HALL_C_PIN);
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002ae:	491d      	ldr	r1, [pc, #116]	; (8000324 <get_halls+0xb4>)
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f9d3 	bl	800065c <gpio_read>

		hallCounts[0] += h_a;
 80002b6:	69bb      	ldr	r3, [r7, #24]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	4413      	add	r3, r2
 80002bc:	61bb      	str	r3, [r7, #24]
		hallCounts[1] += h_b;
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	693a      	ldr	r2, [r7, #16]
 80002c2:	4413      	add	r3, r2
 80002c4:	61fb      	str	r3, [r7, #28]
		hallCounts[2] += h_c;
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	4413      	add	r3, r2
 80002cc:	623b      	str	r3, [r7, #32]
	for (unsigned int i = 0; i < HALL_OVERSAMPLE; i++) {
 80002ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d0:	3301      	adds	r3, #1
 80002d2:	627b      	str	r3, [r7, #36]	; 0x24
 80002d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d6:	2b07      	cmp	r3, #7
 80002d8:	d9d7      	bls.n	800028a <get_halls+0x1a>
	}

	*hall = 0;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]

	// If votes >= threshold, set the corresponding bit to 1
	if (hallCounts[0] > HALL_OVERSAMPLE / 2)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d905      	bls.n	80002f2 <get_halls+0x82>
		*hall |= (1 << 0);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 0201 	orr.w	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]
	if (hallCounts[1] > HALL_OVERSAMPLE / 2)
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b04      	cmp	r3, #4
 80002f6:	d905      	bls.n	8000304 <get_halls+0x94>
		*hall |= (1 << 1);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f043 0202 	orr.w	r2, r3, #2
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]
	if (hallCounts[2] > HALL_OVERSAMPLE / 2)
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	2b04      	cmp	r3, #4
 8000308:	d905      	bls.n	8000316 <get_halls+0xa6>
		*hall |= (1 << 2);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f043 0204 	orr.w	r2, r3, #4
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]

	return ERROR_OK;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3728      	adds	r7, #40	; 0x28
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40010800 	.word	0x40010800

08000328 <writePhases>:
    }
    bldc.throttle_pwm = 0;
    return ERROR_OK;
}

bldc_return_state writePhases(uint16_t ah, uint16_t bh, uint16_t ch, uint16_t al, uint16_t bl, uint16_t cl){
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af02      	add	r7, sp, #8
 800032e:	4604      	mov	r4, r0
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4623      	mov	r3, r4
 8000338:	80fb      	strh	r3, [r7, #6]
 800033a:	4603      	mov	r3, r0
 800033c:	80bb      	strh	r3, [r7, #4]
 800033e:	460b      	mov	r3, r1
 8000340:	807b      	strh	r3, [r7, #2]
 8000342:	4613      	mov	r3, r2
 8000344:	803b      	strh	r3, [r7, #0]
	set_pwm(ah, bh, ch, al, bl, cl);
 8000346:	883c      	ldrh	r4, [r7, #0]
 8000348:	887a      	ldrh	r2, [r7, #2]
 800034a:	88b9      	ldrh	r1, [r7, #4]
 800034c:	88f8      	ldrh	r0, [r7, #6]
 800034e:	8bbb      	ldrh	r3, [r7, #28]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	8b3b      	ldrh	r3, [r7, #24]
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	4623      	mov	r3, r4
 8000358:	f000 f9a8 	bl	80006ac <set_pwm>
	return ERROR_OK;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bd90      	pop	{r4, r7, pc}
	...

08000368 <write_pd_table>:

bldc_return_state write_pd_table(unsigned int halls, unsigned int duty){
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af02      	add	r7, sp, #8
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
	if(duty > 255){
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d901      	bls.n	800037c <write_pd_table+0x14>
		duty = 255;
 8000378:	23ff      	movs	r3, #255	; 0xff
 800037a:	603b      	str	r3, [r7, #0]
	}
	if(duty < 40){
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b27      	cmp	r3, #39	; 0x27
 8000380:	d806      	bhi.n	8000390 <write_pd_table+0x28>
		bldc.throttle_pwm = 0;
 8000382:	4b3e      	ldr	r3, [pc, #248]	; (800047c <write_pd_table+0x114>)
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	; 0x24
		duty = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	603b      	str	r3, [r7, #0]
		halls = 8;
 800038c:	2308      	movs	r3, #8
 800038e:	607b      	str	r3, [r7, #4]
	}

	unsigned int complement = 255 - duty - 6;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8000396:	60fb      	str	r3, [r7, #12]
	
	switch(halls){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3b01      	subs	r3, #1
 800039c:	2b05      	cmp	r3, #5
 800039e:	d85d      	bhi.n	800045c <write_pd_table+0xf4>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <write_pd_table+0x40>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003c1 	.word	0x080003c1
 80003ac:	080003db 	.word	0x080003db
 80003b0:	080003f5 	.word	0x080003f5
 80003b4:	0800040f 	.word	0x0800040f
 80003b8:	08000429 	.word	0x08000429
 80003bc:	08000443 	.word	0x08000443
		case 1: // Case 001
		writePhases(duty, 0, 0, complement, 0, 255);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	b298      	uxth	r0, r3
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	22ff      	movs	r2, #255	; 0xff
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	9200      	str	r2, [sp, #0]
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	f7ff ffa8 	bl	8000328 <writePhases>
		break;
 80003d8:	e04a      	b.n	8000470 <write_pd_table+0x108>
		case 2: // Case 010
		writePhases(0, 0, duty, 0, 255, complement);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	23ff      	movs	r3, #255	; 0xff
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2300      	movs	r3, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff9b 	bl	8000328 <writePhases>
		break;
 80003f2:	e03d      	b.n	8000470 <write_pd_table+0x108>
		case 3: // Case 011
		writePhases(duty, 0, 0, complement, 255, 0);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	b298      	uxth	r0, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	2200      	movs	r2, #0
 80003fe:	9201      	str	r2, [sp, #4]
 8000400:	22ff      	movs	r2, #255	; 0xff
 8000402:	9200      	str	r2, [sp, #0]
 8000404:	2200      	movs	r2, #0
 8000406:	2100      	movs	r1, #0
 8000408:	f7ff ff8e 	bl	8000328 <writePhases>
		break;
 800040c:	e030      	b.n	8000470 <write_pd_table+0x108>
		case 4: // Case 100
		writePhases(0, duty, 0, 255, complement, 0);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	b299      	uxth	r1, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	b29b      	uxth	r3, r3
 8000416:	2200      	movs	r2, #0
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	23ff      	movs	r3, #255	; 0xff
 800041e:	2200      	movs	r2, #0
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ff81 	bl	8000328 <writePhases>
		break;
 8000426:	e023      	b.n	8000470 <write_pd_table+0x108>
		case 5: // Case 101
		writePhases(0, duty, 0, 0, complement, 255);
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	b299      	uxth	r1, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	b29b      	uxth	r3, r3
 8000430:	22ff      	movs	r2, #255	; 0xff
 8000432:	9201      	str	r2, [sp, #4]
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2300      	movs	r3, #0
 8000438:	2200      	movs	r2, #0
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff ff74 	bl	8000328 <writePhases>
		break;
 8000440:	e016      	b.n	8000470 <write_pd_table+0x108>
		case 6: // Case 110
		writePhases(0, 0, duty, 255, 0, complement);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	b29a      	uxth	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	b29b      	uxth	r3, r3
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2300      	movs	r3, #0
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	23ff      	movs	r3, #255	; 0xff
 8000452:	2100      	movs	r1, #0
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ff67 	bl	8000328 <writePhases>
		break;
 800045a:	e009      	b.n	8000470 <write_pd_table+0x108>
		default: // Case 000 or error
		writePhases(0, 0, 0, 255, 255, 255);
 800045c:	23ff      	movs	r3, #255	; 0xff
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	23ff      	movs	r3, #255	; 0xff
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	23ff      	movs	r3, #255	; 0xff
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff ff5c 	bl	8000328 <writePhases>
	}
	return ERROR_OK;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000058 	.word	0x20000058

08000480 <read_throttle>:


bldc_return_state read_throttle(int* data){
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	int throttle_adc;
	adc_read(&throttle_adc, BLDC_THROTTLE_HANDLER, BLDC_THROTTLE_PIN);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	2208      	movs	r2, #8
 800048e:	4919      	ldr	r1, [pc, #100]	; (80004f4 <read_throttle+0x74>)
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f8f8 	bl	8000686 <adc_read>

	throttle_adc = (throttle_adc - THROTTLE_LOW) * 255;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	461a      	mov	r2, r3
 800049a:	4613      	mov	r3, r2
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	f5a3 4347 	sub.w	r3, r3, #50944	; 0xc700
 80004a4:	3b38      	subs	r3, #56	; 0x38
 80004a6:	60fb      	str	r3, [r7, #12]
	if(throttle_adc < 0){
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	da02      	bge.n	80004b4 <read_throttle+0x34>
		throttle_adc *= -1;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	425b      	negs	r3, r3
 80004b2:	60fb      	str	r3, [r7, #12]
	}

	throttle_adc /= (THROTTLE_HIGH - THROTTLE_LOW);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <read_throttle+0x78>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	60fb      	str	r3, [r7, #12]
	bldc.throttle_pwm = throttle_adc;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <read_throttle+0x7c>)
 80004c6:	6253      	str	r3, [r2, #36]	; 0x24

    if (throttle_adc >= 255) // Bound the output between 0 and 255
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2bfe      	cmp	r3, #254	; 0xfe
 80004cc:	dd02      	ble.n	80004d4 <read_throttle+0x54>
        bldc.throttle_pwm = 255;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <read_throttle+0x7c>)
 80004d0:	22ff      	movs	r2, #255	; 0xff
 80004d2:	625a      	str	r2, [r3, #36]	; 0x24

    if (throttle_adc <= 0)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dc02      	bgt.n	80004e0 <read_throttle+0x60>
        bldc.throttle_pwm = 0;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <read_throttle+0x7c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	625a      	str	r2, [r3, #36]	; 0x24

    *data = bldc.throttle_pwm;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <read_throttle+0x7c>)
 80004e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	601a      	str	r2, [r3, #0]
    return ERROR_OK;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000028 	.word	0x20000028
 80004f8:	70070071 	.word	0x70070071
 80004fc:	20000058 	.word	0x20000058

08000500 <read_voltage>:

bldc_return_state read_voltage(int* data){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	adc_read(data, BLDC_VOLTAGE_HANDLER, BLDC_VOLTAGE_PIN);
 8000508:	2240      	movs	r2, #64	; 0x40
 800050a:	4909      	ldr	r1, [pc, #36]	; (8000530 <read_voltage+0x30>)
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f8ba 	bl	8000686 <adc_read>
	bldc.voltage_mv = *data * VOLTAGE_SCALING;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4613      	mov	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4413      	add	r3, r2
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	461a      	mov	r2, r3
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <read_voltage+0x34>)
 8000522:	615a      	str	r2, [r3, #20]
	/*Scale and limits*/
	return ERROR_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028
 8000534:	20000058 	.word	0x20000058

08000538 <read_current_1>:

bldc_return_state read_current_1(int* data){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	adc_read(data, BLDC_CURRENT_1_HANDLER, BLDC_CURRENT_1_PIN);
 8000540:	2204      	movs	r2, #4
 8000542:	4909      	ldr	r1, [pc, #36]	; (8000568 <read_current_1+0x30>)
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f89e 	bl	8000686 <adc_read>
	bldc.current_1_ma = *data * CURRENT_SCALING;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	461a      	mov	r2, r3
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <read_current_1+0x34>)
 800055a:	619a      	str	r2, [r3, #24]
	/*Scale and limits*/
	/*Function to protect over current*/
	return ERROR_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028
 800056c:	20000058 	.word	0x20000058

08000570 <read_current_2>:

bldc_return_state read_current_2(int* data){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	adc_read(data, BLDC_CURRENT_2_HANDLER, BLDC_CURRENT_2_PIN);
 8000578:	2202      	movs	r2, #2
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <read_current_2+0x30>)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f882 	bl	8000686 <adc_read>
	bldc.current_2_ma = *data * CURRENT_SCALING;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	461a      	mov	r2, r3
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <read_current_2+0x34>)
 8000592:	61da      	str	r2, [r3, #28]
	/*Scale and limits*/
	/*Function to protect over current*/
	return ERROR_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000058 	.word	0x20000058

080005a8 <read_current_3>:

bldc_return_state read_current_3(int* data){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	adc_read(data, BLDC_CURRENT_3_HANDLER, BLDC_CURRENT_3_PIN);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4909      	ldr	r1, [pc, #36]	; (80005d8 <read_current_3+0x30>)
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f866 	bl	8000686 <adc_read>
	bldc.current_3_ma = *data * CURRENT_SCALING;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <read_current_3+0x34>)
 80005ca:	621a      	str	r2, [r3, #32]
	/*Scale and limits*/
	return ERROR_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000058 	.word	0x20000058

080005e0 <pwm_irq>:

void pwm_irq() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	start_adc_irq();
 80005e4:	f000 f89a 	bl	800071c <start_adc_irq>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <adc_irq>:

void adc_irq() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	//HAL_ADC_Stop(BLDC_THROTTLE_HANDLER);
	int throttle = 0, voltage = 0, current_1 = 0, current_2 = 0, current_3 = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
	read_throttle(&throttle);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff38 	bl	8000480 <read_throttle>
	read_voltage(&voltage);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff73 	bl	8000500 <read_voltage>
	read_current_1(&current_1);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff8a 	bl	8000538 <read_current_1>
	read_current_2(&current_2);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffa1 	bl	8000570 <read_current_2>
	read_current_3(&current_3);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffb9 	bl	80005a8 <read_current_3>

	unsigned int halls;
	get_halls(&halls);
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe19 	bl	8000270 <get_halls>
	write_pd_table(halls, bldc.throttle_pwm);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <adc_irq+0x6c>)
 8000642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe8e 	bl	8000368 <write_pd_table>

	start_tim_irq();
 800064c:	f000 f876 	bl	800073c <start_tim_irq>
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000058 	.word	0x20000058

0800065c <gpio_read>:

bldc_return_state gpio_read(int* data, GPIO_TypeDef* port, uint16_t pin) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	4613      	mov	r3, r2
 8000668:	80fb      	strh	r3, [r7, #6]
	*data = HAL_GPIO_ReadPin(port, pin);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	4619      	mov	r1, r3
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f001 fb9a 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	601a      	str	r2, [r3, #0]
	return ERROR_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <adc_read>:


bldc_return_state adc_read(int* data, ADC_HandleTypeDef* port, uint16_t pin) {
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	80fb      	strh	r3, [r7, #6]
	*data = HAL_ADC_GetValue(port);
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f000 fdd5 	bl	8001244 <HAL_ADC_GetValue>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	601a      	str	r2, [r3, #0]
	return ERROR_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <set_pwm>:

bldc_return_state set_pwm(uint16_t ah, uint16_t bh, uint16_t ch, uint16_t al, uint16_t bl, uint16_t cl){
 80006ac:	b490      	push	{r4, r7}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4604      	mov	r4, r0
 80006b4:	4608      	mov	r0, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	4623      	mov	r3, r4
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	4603      	mov	r3, r0
 80006c0:	80bb      	strh	r3, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	807b      	strh	r3, [r7, #2]
 80006c6:	4613      	mov	r3, r2
 80006c8:	803b      	strh	r3, [r7, #0]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	__HAL_TIM_SET_COMPARE(BLDC_PWM_A_HANDLER, TIM_CHANNEL_2, 200);
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <set_pwm+0x68>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	22c8      	movs	r2, #200	; 0xc8
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(BLDC_PWM_A_HANDLER, TIM_CHANNEL_1, 255 - al);
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <set_pwm+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(BLDC_PWM_B_HANDLER_H, TIM_CHANNEL_4, bh);
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <set_pwm+0x6c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	88ba      	ldrh	r2, [r7, #4]
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(BLDC_PWM_B_HANDLER_L, TIM_CHANNEL_3, 255 - bl);
 80006e6:	8a3b      	ldrh	r3, [r7, #16]
 80006e8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <set_pwm+0x68>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(BLDC_PWM_C_HANDLER, TIM_CHANNEL_2, ch);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <set_pwm+0x6c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(BLDC_PWM_C_HANDLER, TIM_CHANNEL_3, 255 - cl);
 80006fa:	8abb      	ldrh	r3, [r7, #20]
 80006fc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <set_pwm+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
	return ERROR_OK;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bc90      	pop	{r4, r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0
 8000718:	200000e8 	.word	0x200000e8

0800071c <start_adc_irq>:

bldc_return_state start_adc_irq(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	//HAL_ADC_Stop(BLDC_THROTTLE_HANDLER);
	//if(adc_conv_completed == 1){
	if(HAL_ADC_Start_IT(BLDC_THROTTLE_HANDLER) != HAL_OK){
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <start_adc_irq+0x1c>)
 8000722:	f000 fcd9 	bl	80010d8 <HAL_ADC_Start_IT>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <start_adc_irq+0x14>
		Error_Handler();
 800072c:	f000 f916 	bl	800095c <Error_Handler>
	}
		//adc_conv_completed = 0;
	//}
	return ERROR_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028

0800073c <start_tim_irq>:


bldc_return_state start_tim_irq(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Stop(BLDC_PWM_A_HANDLER, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start_IT(BLDC_PWM_A_HANDLER, TIM_CHANNEL_2);
 8000740:	2104      	movs	r1, #4
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <start_tim_irq+0x14>)
 8000744:	f002 f970 	bl	8002a28 <HAL_TIM_PWM_Start_IT>
	return ERROR_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000a0 	.word	0x200000a0

08000754 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == BLDC_PWM_A_HANDLER->Instance){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d101      	bne.n	800076c <HAL_TIM_PeriodElapsedCallback+0x18>
		pwm_irq();
 8000768:	f7ff ff3a 	bl	80005e0 <pwm_irq>
	}
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000a0 	.word	0x200000a0

08000778 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == BLDC_THROTTLE_HANDLER->Instance){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_ADC_ConvCpltCallback+0x20>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <HAL_ADC_ConvCpltCallback+0x18>
		adc_irq();
 800078c:	f7ff ff2e 	bl	80005ec <adc_irq>
	}
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000028 	.word	0x20000028

0800079c <GPIO_Init>:
#include "bldc_pinout.h"

/** Configure pins
*/
void GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <GPIO_Init+0xbc>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <GPIO_Init+0xbc>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <GPIO_Init+0xbc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <GPIO_Init+0xbc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <GPIO_Init+0xbc>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <GPIO_Init+0xbc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <GPIO_Init+0xbc>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <GPIO_Init+0xbc>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <GPIO_Init+0xbc>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Hall_C_Pin;
 80007f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000806:	2301      	movs	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Hall_C_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <GPIO_Init+0xc0>)
 8000812:	f001 f945 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Hall_B_Pin|Hall_A_Pin;
 8000816:	2318      	movs	r3, #24
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Hall_B_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <GPIO_Init+0xc4>)
 800082e:	f001 f937 	bl	8001aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8000832:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <GPIO_Init+0xc8>)
 800084c:	f001 f928 	bl	8001aa0 <HAL_GPIO_Init>
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800
 8000860:	40010c00 	.word	0x40010c00
 8000864:	40011000 	.word	0x40011000

08000868 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  HAL_Init();
 800086e:	f000 faf9 	bl	8000e64 <HAL_Init>
  SystemClock_Config();
 8000872:	f000 f823 	bl	80008bc <SystemClock_Config>

  GPIO_Init();
 8000876:	f7ff ff91 	bl	800079c <GPIO_Init>
  ADC1_Init();
 800087a:	f7ff fc67 	bl	800014c <ADC1_Init>
  MX_TIM1_Init();
 800087e:	f000 f8df 	bl	8000a40 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000882:	f000 f997 	bl	8000bb4 <MX_TIM3_Init>
  start_adc_irq();
 8000886:	f7ff ff49 	bl	800071c <start_adc_irq>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <main+0x50>)
 8000892:	f001 faa0 	bl	8001dd6 <HAL_GPIO_WritePin>

  unsigned long blink_aux = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  const uint16_t time_to_blink = 1000;
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	807b      	strh	r3, [r7, #2]

  while (1)
  {
    if(HAL_GetTick() - blink_aux >= time_to_blink){
 80008a0:	f000 fb38 	bl	8000f14 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1ad2      	subs	r2, r2, r3
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d3f7      	bcc.n	80008a0 <main+0x38>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  blink_aux = HAL_GetTick();
 80008b0:	f000 fb30 	bl	8000f14 <HAL_GetTick>
 80008b4:	6078      	str	r0, [r7, #4]
    if(HAL_GetTick() - blink_aux >= time_to_blink){
 80008b6:	e7f3      	b.n	80008a0 <main+0x38>
 80008b8:	40011000 	.word	0x40011000

080008bc <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ffb7 	bl	800383e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fa81 	bl	8001e08 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800090c:	f000 f826 	bl	800095c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fcee 	bl	800230c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000936:	f000 f811 	bl	800095c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fe5b 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000950:	f000 f804 	bl	800095c <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	; 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <Error_Handler>:

void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  __disable_irq();

  while (1){
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4802      	ldr	r0, [pc, #8]	; (8000974 <Error_Handler+0x18>)
 800096c:	f001 fa33 	bl	8001dd6 <HAL_GPIO_WritePin>
 8000970:	e7f8      	b.n	8000964 <Error_Handler+0x8>
 8000972:	bf00      	nop
 8000974:	40011000 	.word	0x40011000

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x40>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_MspInit+0x40>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x40>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x40>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_MspInit+0x40>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_MspInit+0x40>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 fa75 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <ADC1_2_IRQHandler+0x10>)
 8000a12:	f000 fc23 	bl	800125c <HAL_ADC_IRQHandler>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000028 	.word	0x20000028

08000a20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM1_UP_IRQHandler+0x10>)
 8000a26:	f002 f8ef 	bl	8002c08 <HAL_TIM_IRQHandler>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000a0 	.word	0x200000a0

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

void MX_TIM1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b096      	sub	sp, #88	; 0x58
 8000a44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2220      	movs	r2, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fee0 	bl	800383e <memset>

  htim1.Instance = TIM1;
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a80:	4a4b      	ldr	r2, [pc, #300]	; (8000bb0 <MX_TIM1_Init+0x170>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a84:	4b49      	ldr	r3, [pc, #292]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b48      	ldr	r3, [pc, #288]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000a90:	4b46      	ldr	r3, [pc, #280]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b45      	ldr	r3, [pc, #276]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	619a      	str	r2, [r3, #24]

  // ENABLE INTERRUPT FOR TIM1 (THIS HAS TO GO BEFORE TIM BASE INIT)
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000aa2:	4b42      	ldr	r3, [pc, #264]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	4b40      	ldr	r3, [pc, #256]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f042 0201 	orr.w	r2, r2, #1
 8000ab0:	60da      	str	r2, [r3, #12]

  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab2:	483e      	ldr	r0, [pc, #248]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000ab4:	f001 ff10 	bl	80028d8 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000abe:	f7ff ff4d 	bl	800095c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000acc:	4619      	mov	r1, r3
 8000ace:	4837      	ldr	r0, [pc, #220]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000ad0:	f002 fa64 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000ada:	f7ff ff3f 	bl	800095c <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000ae0:	f001 ff49 	bl	8002976 <HAL_TIM_PWM_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000aea:	f7ff ff37 	bl	800095c <Error_Handler>
  }


  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afa:	4619      	mov	r1, r3
 8000afc:	482b      	ldr	r0, [pc, #172]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000afe:	f002 fddd 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000b08:	f7ff ff28 	bl	800095c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0c:	2360      	movs	r3, #96	; 0x60
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481e      	ldr	r0, [pc, #120]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000b32:	f002 f971 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b3c:	f7ff ff0e 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2204      	movs	r2, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000b4a:	f002 f965 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000b54:	f7ff ff02 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000b62:	f002 f959 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000b6c:	f7ff fef6 	bl	800095c <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	61bb      	str	r3, [r7, #24]
  //sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000b90:	f002 fdf2 	bl	8003778 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000b9a:	f7ff fedf 	bl	800095c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM1_Init+0x16c>)
 8000ba0:	f000 f8cc 	bl	8000d3c <HAL_TIM_MspPostInit>
}
 8000ba4:	bf00      	nop
 8000ba6:	3758      	adds	r7, #88	; 0x58
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000be4:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <MX_TIM3_Init+0x110>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c08:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c0a:	f001 fe65 	bl	80028d8 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c14:	f7ff fea2 	bl	800095c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4826      	ldr	r0, [pc, #152]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c26:	f002 f9b9 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c30:	f7ff fe94 	bl	800095c <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c36:	f001 fe9e 	bl	8002976 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c40:	f7ff fe8c 	bl	800095c <Error_Handler>
  }


  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	4619      	mov	r1, r3
 8000c52:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c54:	f002 fd32 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000c5e:	f7ff fe7d 	bl	800095c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2204      	movs	r2, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c76:	f002 f8cf 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c80:	f7ff fe6c 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000c8c:	f002 f8c4 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000c96:	f7ff fe61 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000ca2:	f002 f8b9 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000cac:	f7ff fe56 	bl	800095c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM3_Init+0x10c>)
 8000cb2:	f000 f843 	bl	8000d3c <HAL_TIM_MspPostInit>
}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000e8 	.word	0x200000e8
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_TIM_Base_MspInit+0x68>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d114      	bne.n	8000d04 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 fe9b 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f000 feb4 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  }
  else if(tim_baseHandle->Instance==TIM3)
  {
    __HAL_RCC_TIM3_CLK_ENABLE();
  }
}
 8000d02:	e010      	b.n	8000d26 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_TIM_Base_MspInit+0x70>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_TIM_Base_MspInit+0x6c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40000400 	.word	0x40000400

08000d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <HAL_TIM_MspPostInit+0xc8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d119      	bne.n	8000d90 <HAL_TIM_MspPostInit+0x54>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_L_Pin|A_H_Pin|B_L_Pin;
 8000d74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <HAL_TIM_MspPostInit+0xd0>)
 8000d8a:	f000 fe89 	bl	8001aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }

}
 8000d8e:	e034      	b.n	8000dfa <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_TIM_MspPostInit+0xd4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12f      	bne.n	8000dfa <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_TIM_MspPostInit+0xcc>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = C_H_Pin;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C_H_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_TIM_MspPostInit+0xd0>)
 8000dde:	f000 fe5f 	bl	8001aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C_L_Pin|B_H_Pin;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2302      	movs	r3, #2
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <HAL_TIM_MspPostInit+0xd8>)
 8000df6:	f000 fe53 	bl	8001aa0 <HAL_GPIO_Init>
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40012c00 	.word	0x40012c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff fe0c 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1e:	490c      	ldr	r1, [pc, #48]	; (8000e50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e34:	4c09      	ldr	r4, [pc, #36]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f002 fd05 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e46:	f7ff fd0f 	bl	8000868 <main>
  bx lr
 8000e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e54:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8000e58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e5c:	20000134 	.word	0x20000134

08000e60 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <CAN1_RX1_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 fdd1 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fd7a 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fde9 	bl	8001a86 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 fdb1 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_IncTick+0x20>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000130 	.word	0x20000130

08000f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GetTick+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	20000130 	.word	0x20000130

08000f28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0be      	b.n	80010c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d109      	bne.n	8000f6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff f93e 	bl	80001e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fb8f 	bl	8001690 <ADC_ConversionStop_Disable>
 8000f72:	4603      	mov	r3, r0
 8000f74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8099 	bne.w	80010b6 <HAL_ADC_Init+0x18e>
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8095 	bne.w	80010b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f94:	f023 0302 	bic.w	r3, r3, #2
 8000f98:	f043 0202 	orr.w	r2, r3, #2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fa8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7b1b      	ldrb	r3, [r3, #12]
 8000fae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc0:	d003      	beq.n	8000fca <HAL_ADC_Init+0xa2>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <HAL_ADC_Init+0xa8>
 8000fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fce:	e000      	b.n	8000fd2 <HAL_ADC_Init+0xaa>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7d1b      	ldrb	r3, [r3, #20]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d119      	bne.n	8001014 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7b1b      	ldrb	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d109      	bne.n	8000ffc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	035a      	lsls	r2, r3, #13
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	e00b      	b.n	8001014 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f043 0220 	orr.w	r2, r3, #32
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_ADC_Init+0x1a8>)
 8001030:	4013      	ands	r3, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	430b      	orrs	r3, r1
 800103a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001044:	d003      	beq.n	800104e <HAL_ADC_Init+0x126>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d104      	bne.n	8001058 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	3b01      	subs	r3, #1
 8001054:	051b      	lsls	r3, r3, #20
 8001056:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	430a      	orrs	r2, r1
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_Init+0x1ac>)
 8001074:	4013      	ands	r3, r2
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	429a      	cmp	r2, r3
 800107a:	d10b      	bne.n	8001094 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001092:	e018      	b.n	80010c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f023 0312 	bic.w	r3, r3, #18
 800109c:	f043 0210 	orr.w	r2, r3, #16
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010b4:	e007      	b.n	80010c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f043 0210 	orr.w	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	ffe1f7fd 	.word	0xffe1f7fd
 80010d4:	ff1f0efe 	.word	0xff1f0efe

080010d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Start_IT+0x1a>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e0a0      	b.n	8001234 <HAL_ADC_Start_IT+0x15c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa6e 	bl	80015dc <ADC_Enable>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 808f 	bne.w	800122a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_ADC_Start_IT+0x164>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d105      	bne.n	8001136 <HAL_ADC_Start_IT+0x5e>
 800112a:	4b45      	ldr	r3, [pc, #276]	; (8001240 <HAL_ADC_Start_IT+0x168>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d026      	beq.n	800119e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001160:	e01d      	b.n	800119e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a33      	ldr	r2, [pc, #204]	; (8001240 <HAL_ADC_Start_IT+0x168>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d004      	beq.n	8001182 <HAL_ADC_Start_IT+0xaa>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_ADC_Start_IT+0x164>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10d      	bne.n	800119e <HAL_ADC_Start_IT+0xc6>
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_ADC_Start_IT+0x168>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001196:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	f023 0206 	bic.w	r2, r3, #6
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b6:	e002      	b.n	80011be <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f06f 0202 	mvn.w	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0220 	orr.w	r2, r2, #32
 80011de:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ee:	d113      	bne.n	8001218 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_ADC_Start_IT+0x164>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d105      	bne.n	8001206 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_ADC_Start_IT+0x168>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e00c      	b.n	8001232 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e003      	b.n	8001232 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012800 	.word	0x40012800
 8001240:	40012400 	.word	0x40012400

08001244 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03e      	beq.n	80012fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d039      	beq.n	80012fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012ae:	d11d      	bne.n	80012ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d119      	bne.n	80012ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0220 	bic.w	r2, r2, #32
 80012c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fa43 	bl	8000778 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f06f 0212 	mvn.w	r2, #18
 80012fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	2b00      	cmp	r3, #0
 8001304:	d04d      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d048      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001332:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001336:	d012      	beq.n	800135e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001342:	2b00      	cmp	r3, #0
 8001344:	d125      	bne.n	8001392 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001350:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001354:	d11d      	bne.n	8001392 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d119      	bne.n	8001392 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fa6c 	bl	8001870 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 020c 	mvn.w	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d012      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f809 	bl	80013da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f06f 0201 	mvn.w	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_ADC_ConfigChannel+0x20>
 8001408:	2302      	movs	r3, #2
 800140a:	e0dc      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1da>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b06      	cmp	r3, #6
 800141a:	d81c      	bhi.n	8001456 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b05      	subs	r3, #5
 800142e:	221f      	movs	r2, #31
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4019      	ands	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3b05      	subs	r3, #5
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
 8001454:	e03c      	b.n	80014d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d81c      	bhi.n	8001498 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b23      	subs	r3, #35	; 0x23
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	4019      	ands	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3b23      	subs	r3, #35	; 0x23
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
 8001496:	e01b      	b.n	80014d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b41      	subs	r3, #65	; 0x41
 80014aa:	221f      	movs	r2, #31
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4019      	ands	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	3b41      	subs	r3, #65	; 0x41
 80014c4:	fa00 f203 	lsl.w	r2, r0, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d91c      	bls.n	8001512 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68d9      	ldr	r1, [r3, #12]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4019      	ands	r1, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6898      	ldr	r0, [r3, #8]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	3b1e      	subs	r3, #30
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	e019      	b.n	8001546 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6919      	ldr	r1, [r3, #16]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	2207      	movs	r2, #7
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	fa00 f203 	lsl.w	r2, r0, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b10      	cmp	r3, #16
 800154c:	d003      	beq.n	8001556 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001552:	2b11      	cmp	r3, #17
 8001554:	d132      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d125      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d126      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800157c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d11a      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9a      	lsrs	r2, r3, #18
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_ConfigChannel+0x1b2>
 80015aa:	e007      	b.n	80015bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012400 	.word	0x40012400
 80015d4:	20000000 	.word	0x20000000
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d040      	beq.n	800167c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <ADC_Enable+0xac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <ADC_Enable+0xb0>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001618:	e002      	b.n	8001620 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001626:	f7ff fc75 	bl	8000f14 <HAL_GetTick>
 800162a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800162c:	e01f      	b.n	800166e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800162e:	f7ff fc71 	bl	8000f14 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d918      	bls.n	800166e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d011      	beq.n	800166e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e007      	b.n	800167e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b01      	cmp	r3, #1
 800167a:	d1d8      	bne.n	800162e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000
 800168c:	431bde83 	.word	0x431bde83

08001690 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d12e      	bne.n	8001708 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ba:	f7ff fc2b 	bl	8000f14 <HAL_GetTick>
 80016be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016c0:	e01b      	b.n	80016fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016c2:	f7ff fc27 	bl	8000f14 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d914      	bls.n	80016fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10d      	bne.n	80016fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e007      	b.n	800170a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d0dc      	beq.n	80016c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADCEx_Calibration_Start+0x1e>
 800172e:	2302      	movs	r3, #2
 8001730:	e097      	b.n	8001862 <HAL_ADCEx_Calibration_Start+0x14e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa8 	bl	8001690 <ADC_ConversionStop_Disable>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff49 	bl	80015dc <ADC_Enable>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8081 	bne.w	8001858 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_ADCEx_Calibration_Start+0x158>)
 800176c:	681c      	ldr	r4, [r3, #0]
 800176e:	2002      	movs	r0, #2
 8001770:	f000 fffc 	bl	800276c <HAL_RCCEx_GetPeriphCLKFreq>
 8001774:	4603      	mov	r3, r0
 8001776:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800177a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800177c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800177e:	e002      	b.n	8001786 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3b01      	subs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f9      	bne.n	8001780 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800179c:	f7ff fbba 	bl	8000f14 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017a2:	e01b      	b.n	80017dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017a4:	f7ff fbb6 	bl	8000f14 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d914      	bls.n	80017dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00d      	beq.n	80017dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f023 0312 	bic.w	r3, r3, #18
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e042      	b.n	8001862 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1dc      	bne.n	80017a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0204 	orr.w	r2, r2, #4
 80017f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017fa:	f7ff fb8b 	bl	8000f14 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001800:	e01b      	b.n	800183a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001802:	f7ff fb87 	bl	8000f14 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d914      	bls.n	800183a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f023 0312 	bic.w	r3, r3, #18
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e013      	b.n	8001862 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1dc      	bne.n	8001802 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
	...

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <__NVIC_EnableIRQ+0x34>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff90 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff2d 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff42 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff90 	bl	8001974 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e169      	b.n	8001d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8158 	bne.w	8001d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a9a      	ldr	r2, [pc, #616]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d05e      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001adc:	4a98      	ldr	r2, [pc, #608]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d875      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001ae2:	4a98      	ldr	r2, [pc, #608]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d058      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001ae8:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d86f      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001aee:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d052      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001af4:	4a94      	ldr	r2, [pc, #592]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d869      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001afa:	4a94      	ldr	r2, [pc, #592]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04c      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b00:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d863      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b06:	4a92      	ldr	r2, [pc, #584]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d046      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b0c:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d85d      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d82a      	bhi.n	8001b6c <HAL_GPIO_Init+0xcc>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d859      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_GPIO_Init+0x80>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b75 	.word	0x08001b75
 8001b28:	08001b87 	.word	0x08001b87
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bcf 	.word	0x08001bcf
 8001b34:	08001bcf 	.word	0x08001bcf
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001bcf 	.word	0x08001bcf
 8001b40:	08001bcf 	.word	0x08001bcf
 8001b44:	08001bcf 	.word	0x08001bcf
 8001b48:	08001bcf 	.word	0x08001bcf
 8001b4c:	08001bcf 	.word	0x08001bcf
 8001b50:	08001bcf 	.word	0x08001bcf
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001bcf 	.word	0x08001bcf
 8001b5c:	08001bcf 	.word	0x08001bcf
 8001b60:	08001bcf 	.word	0x08001bcf
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	4a79      	ldr	r2, [pc, #484]	; (8001d54 <HAL_GPIO_Init+0x2b4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b72:	e02c      	b.n	8001bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e029      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e024      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e01f      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	330c      	adds	r3, #12
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e01a      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e013      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	611a      	str	r2, [r3, #16]
          break;
 8001bba:	e009      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	615a      	str	r2, [r3, #20]
          break;
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          break;
 8001bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d801      	bhi.n	8001bda <HAL_GPIO_Init+0x13a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_Init+0x13e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d802      	bhi.n	8001bec <HAL_GPIO_Init+0x14c>
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x152>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3b08      	subs	r3, #8
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80b1 	beq.w	8001d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a40      	ldr	r2, [pc, #256]	; (8001d60 <HAL_GPIO_Init+0x2c0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_GPIO_Init+0x1ec>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <HAL_GPIO_Init+0x2c4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00d      	beq.n	8001c88 <HAL_GPIO_Init+0x1e8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <HAL_GPIO_Init+0x2c8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x1e4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_GPIO_Init+0x1e0>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e006      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e004      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	f002 0203 	and.w	r2, r2, #3
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	4093      	lsls	r3, r2
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c9e:	492f      	ldr	r1, [pc, #188]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	492c      	ldr	r1, [pc, #176]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4928      	ldr	r1, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	491e      	ldr	r1, [pc, #120]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4914      	ldr	r1, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e021      	b.n	8001d82 <HAL_GPIO_Init+0x2e2>
 8001d3e:	bf00      	nop
 8001d40:	10320000 	.word	0x10320000
 8001d44:	10310000 	.word	0x10310000
 8001d48:	10220000 	.word	0x10220000
 8001d4c:	10210000 	.word	0x10210000
 8001d50:	10120000 	.word	0x10120000
 8001d54:	10110000 	.word	0x10110000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40011400 	.word	0x40011400
 8001d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f ae8e 	bne.w	8001ab4 <HAL_GPIO_Init+0x14>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	372c      	adds	r7, #44	; 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de6:	787b      	ldrb	r3, [r7, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e272      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d112      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d06c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x12c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d168      	bne.n	8001f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e24c      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76>
 8001e70:	4b80      	ldr	r3, [pc, #512]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a7f      	ldr	r2, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b78      	ldr	r3, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a77      	ldr	r2, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xbc>
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f816 	bl	8000f14 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f812 	bl	8000f14 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e200      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe4>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f802 	bl	8000f14 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fffe 	bl	8000f14 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ec      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x10c>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1c0      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4939      	ldr	r1, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ffb7 	bl	8000f14 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe ffb3 	bl	8000f14 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1a1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4927      	ldr	r1, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe ff96 	bl	8000f14 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe ff92 	bl	8000f14 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e180      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03a      	beq.n	800208c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d019      	beq.n	8002052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe ff76 	bl	8000f14 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe ff72 	bl	8000f14 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e160      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 faba 	bl	80025c4 <RCC_Delay>
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe ff5c 	bl	8000f14 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7fe ff58 	bl	8000f14 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d908      	bls.n	8002080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e146      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	42420000 	.word	0x42420000
 800207c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e9      	bne.n	8002060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a6 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7fe ff19 	bl	8000f14 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe ff15 	bl	8000f14 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e103      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x312>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x334>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x356>
 8002144:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fec9 	bl	8000f14 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fec5 	bl	8000f14 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x37e>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe feb3 	bl	8000f14 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe feaf 	bl	8000f14 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d061      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d146      	bne.n	8002292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fe83 	bl	8000f14 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fe7f 	bl	8000f14 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e06d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d108      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4921      	ldr	r1, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a19      	ldr	r1, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	430b      	orrs	r3, r1
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fe53 	bl	8000f14 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fe4f 	bl	8000f14 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x46a>
 8002290:	e035      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fe3c 	bl	8000f14 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fe38 	bl	8000f14 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x498>
 80022be:	e01e      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e019      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x500>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0d0      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4965      	ldr	r1, [pc, #404]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d040      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e073      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fd8a 	bl	8000f14 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe fd86 	bl	8000f14 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e053      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4922      	ldr	r1, [pc, #136]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fce8 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080038b0 	.word	0x080038b0
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x30>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x36>
 800250e:	e027      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	e027      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e004      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	613b      	str	r3, [r7, #16]
      break;
 800255e:	e002      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002566:	693b      	ldr	r3, [r7, #16]
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200
 800257c:	080038c8 	.word	0x080038c8
 8002580:	080038d8 	.word	0x080038d8
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080038c0 	.word	0x080038c0

080025c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCC_Delay+0x34>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <RCC_Delay+0x38>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e0:	bf00      	nop
  }
  while (Delay --);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	60fa      	str	r2, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <RCC_Delay+0x1c>
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000000 	.word	0x20000000
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d07d      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d118      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002660:	f7fe fc58 	bl	8000f14 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	e008      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fc54 	bl	8000f14 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e06d      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02e      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d027      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b4:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d014      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe fc23 	bl	8000f14 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fc1f 	bl	8000f14 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e036      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4917      	ldr	r1, [pc, #92]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	4313      	orrs	r3, r2
 8002704:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	490b      	ldr	r1, [pc, #44]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	42420440 	.word	0x42420440

0800276c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b10      	cmp	r3, #16
 8002792:	f200 808a 	bhi.w	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d045      	beq.n	8002828 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d075      	beq.n	800288e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80027a2:	e082      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027aa:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d07b      	beq.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0c9b      	lsrs	r3, r3, #18
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a41      	ldr	r2, [pc, #260]	; (80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0c5b      	lsrs	r3, r3, #17
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	4a3b      	ldr	r2, [pc, #236]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027e8:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e004      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002810:	d102      	bne.n	8002818 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	61bb      	str	r3, [r7, #24]
      break;
 8002816:	e04a      	b.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
      break;
 8002826:	e042      	b.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d108      	bne.n	800284c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e01f      	b.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002856:	d109      	bne.n	800286c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002864:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e00f      	b.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002876:	d11c      	bne.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002884:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002888:	61bb      	str	r3, [r7, #24]
      break;
 800288a:	e012      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800288c:	e011      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800288e:	f7ff fe85 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0b9b      	lsrs	r3, r3, #14
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	61bb      	str	r3, [r7, #24]
      break;
 80028a8:	e004      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028b2:	bf00      	nop
    }
  }
  return (frequency);
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080038dc 	.word	0x080038dc
 80028c8:	080038ec 	.word	0x080038ec
 80028cc:	007a1200 	.word	0x007a1200
 80028d0:	003d0900 	.word	0x003d0900
 80028d4:	aaaaaaab 	.word	0xaaaaaaab

080028d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e041      	b.n	800296e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f9e2 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fc2c 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e041      	b.n	8002a0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f839 	bl	8002a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f000 fbdd 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_TIM_PWM_Start_IT+0x28>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e022      	b.n	8002a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d109      	bne.n	8002a6a <HAL_TIM_PWM_Start_IT+0x42>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e015      	b.n	8002a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start_IT+0x5c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e008      	b.n	8002a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0a9      	b.n	8002bf2 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_PWM_Start_IT+0x86>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	e013      	b.n	8002ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d104      	bne.n	8002abe <HAL_TIM_PWM_Start_IT+0x96>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002abc:	e00b      	b.n	8002ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start_IT+0xa6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	e003      	b.n	8002ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d841      	bhi.n	8002b60 <HAL_TIM_PWM_Start_IT+0x138>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b61 	.word	0x08002b61
 8002aec:	08002b61 	.word	0x08002b61
 8002af0:	08002b61 	.word	0x08002b61
 8002af4:	08002b2b 	.word	0x08002b2b
 8002af8:	08002b61 	.word	0x08002b61
 8002afc:	08002b61 	.word	0x08002b61
 8002b00:	08002b61 	.word	0x08002b61
 8002b04:	08002b3d 	.word	0x08002b3d
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b61 	.word	0x08002b61
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b4f 	.word	0x08002b4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0202 	orr.w	r2, r2, #2
 8002b26:	60da      	str	r2, [r3, #12]
      break;
 8002b28:	e01d      	b.n	8002b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0204 	orr.w	r2, r2, #4
 8002b38:	60da      	str	r2, [r3, #12]
      break;
 8002b3a:	e014      	b.n	8002b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	60da      	str	r2, [r3, #12]
      break;
 8002b4c:	e00b      	b.n	8002b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0210 	orr.w	r2, r2, #16
 8002b5c:	60da      	str	r2, [r3, #12]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d141      	bne.n	8002bf0 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fd7d 	bl	8003674 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00e      	beq.n	8002bbc <HAL_TIM_PWM_Start_IT+0x194>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d009      	beq.n	8002bbc <HAL_TIM_PWM_Start_IT+0x194>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_TIM_PWM_Start_IT+0x194>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d111      	bne.n	8002be0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d010      	beq.n	8002bf0 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bde:	e007      	b.n	8002bf0 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0202 	mvn.w	r2, #2
 8002c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa76 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa69 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa78 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0204 	mvn.w	r2, #4
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa4c 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa3f 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fa4e 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d122      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa22 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa15 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fa24 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d122      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d11b      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0210 	mvn.w	r2, #16
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2208      	movs	r2, #8
 8002d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9f8 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f9eb 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f9fa 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0201 	mvn.w	r2, #1
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fce4 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fd3a 	bl	800382c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9be 	bl	8003160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d10e      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0220 	mvn.w	r2, #32
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fd05 	bl	800381a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0ae      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	f200 809f 	bhi.w	8002f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002f85 	.word	0x08002f85
 8002e54:	08002f85 	.word	0x08002f85
 8002e58:	08002f85 	.word	0x08002f85
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002f85 	.word	0x08002f85
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	08002f03 	.word	0x08002f03
 8002e70:	08002f85 	.word	0x08002f85
 8002e74:	08002f85 	.word	0x08002f85
 8002e78:	08002f85 	.word	0x08002f85
 8002e7c:	08002f43 	.word	0x08002f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f9d6 	bl	8003238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
      break;
 8002ebe:	e064      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fa1c 	bl	8003304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
      break;
 8002f00:	e043      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa65 	bl	80033d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0208 	orr.w	r2, r2, #8
 8002f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
      break;
 8002f40:	e023      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 faaf 	bl	80034ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0b4      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x186>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff0:	d03e      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	f200 8087 	bhi.w	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	f000 8086 	beq.w	800310e <HAL_TIM_ConfigClockSource+0x172>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d87f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d01a      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xa6>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d87b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d050      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d877      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d03c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xfa>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d873      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d058      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d86f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d064      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d86b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d060      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d867      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d05a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	e062      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	f000 faf0 	bl	8003636 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e04f      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	f000 fad9 	bl	8003636 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]
      break;
 8003094:	e03c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fa50 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2150      	movs	r1, #80	; 0x50
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 faa7 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e02c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fa6e 	bl	80035a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2160      	movs	r1, #96	; 0x60
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa97 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e01c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa30 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa87 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e00c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f000 fa7e 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003106:	e003      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e000      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800310e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
	...

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a29      	ldr	r2, [pc, #164]	; (800322c <TIM_Base_SetConfig+0xb8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00b      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d007      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <TIM_Base_SetConfig+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <TIM_Base_SetConfig+0xb8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800

08003238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 0201 	bic.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <TIM_OC1_SetConfig+0xc8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10c      	bne.n	80032ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0308 	bic.w	r3, r3, #8
 800329a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <TIM_OC1_SetConfig+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 0210 	bic.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC2_SetConfig+0xd0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10d      	bne.n	8003380 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <TIM_OC2_SetConfig+0xd0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d113      	bne.n	80033b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <TIM_OC3_SetConfig+0xd0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10d      	bne.n	8003452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <TIM_OC3_SetConfig+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00

080034ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <TIM_OC4_SetConfig+0x98>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d109      	bne.n	8003520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0210 	bic.w	r2, r3, #16
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021a      	lsls	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e046      	b.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10c      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4313      	orrs	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800

08003778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003790:	2302      	movs	r3, #2
 8003792:	e03d      	b.n	8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <memset>:
 800383e:	4603      	mov	r3, r0
 8003840:	4402      	add	r2, r0
 8003842:	4293      	cmp	r3, r2
 8003844:	d100      	bne.n	8003848 <memset+0xa>
 8003846:	4770      	bx	lr
 8003848:	f803 1b01 	strb.w	r1, [r3], #1
 800384c:	e7f9      	b.n	8003842 <memset+0x4>
	...

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	2600      	movs	r6, #0
 8003854:	4d0c      	ldr	r5, [pc, #48]	; (8003888 <__libc_init_array+0x38>)
 8003856:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	f000 f81a 	bl	8003898 <_init>
 8003864:	2600      	movs	r6, #0
 8003866:	4d0a      	ldr	r5, [pc, #40]	; (8003890 <__libc_init_array+0x40>)
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <__libc_init_array+0x44>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	080038f0 	.word	0x080038f0
 800388c:	080038f0 	.word	0x080038f0
 8003890:	080038f0 	.word	0x080038f0
 8003894:	080038f4 	.word	0x080038f4

08003898 <_init>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr

080038a4 <_fini>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr
